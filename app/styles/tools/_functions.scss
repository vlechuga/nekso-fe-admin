/// Converts a numeric value
/// @group functions
@function __parseInt($n) {
  @return $n / ($n * 0 + 1);
}

/// Converts a numeric value in pixel unit
/// @group functions
@function __px($px){
  @return #{$px}px;
}

/// Em calculated as unit value given pixel
/// @group functions
@function __em($pixels, $context: $size-base-font) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return ($pixels / $context) * 1em;
}

/// Rem calculated as unit value given pixel
/// @group functions
@function __rem($size, $base: $size-base-font) {
  $remSize: $size / $base;
  @return $remSize * 1rem;
}

/// Line height calculated based on em Units
/// @group functions
@function __line-height($px, $lg: $size-base-font) {
  @return ($lg / $px) * 1em;
}

/// Opacity calculated based on 100 Units
/// @group functions
@function __calculate-opacity($opacity: 0.5) {
  @return $opacity * 100;
}

/// Transforms a given in another light color with new features
/// @group functions
@function __transform-color-sl($color: #000000, $adjust: 0, $lighten: 0, $saturate: 0) {
  $new-color: $color;
  @if $lighten != 0 and $saturate != 0 {
    $new-color: saturate(lighten(adjust_hue($color, $adjust), $lighten), $saturate);
  } @else if $lighten != 0 and $saturate == 0 {
    $new-color: lighten(adjust_hue($color, $adjust), $lighten);
  } @else if $lighten == 0 and $saturate == 0 {
    $new-color: adjust_hue($color, $adjust);
  }
  @return $new-color;
}

/// Transforms a given in another dark color with new features
/// @group functions
@function __transform-color-dd($color: #000000, $adjust: 0, $darken: 0, $desaturate: 0) {
  $new-color: $color;
  @if $darken != 0 and $desaturate != 0 {
    $new-color: desaturate(darken(adjust_hue($color, $adjust), $darken), $desaturate);
  } @else if $darken != 0 and $desaturate == 0 {
    $new-color: darken(adjust_hue($color, $adjust), $darken);
  } @else if $darken == 0 and $desaturate == 0 {
    $new-color: adjust_hue($color, $adjust);
  }
  @return $new-color;
}

/// Returns the text color according to the background color
/// @group functions
@function __dynamic-text-color($color, $lightness: 70, $setdark: #555555, $setlight: #ffffff) {
  @if (lightness($color) > $lightness) {
    @return $setdark; // Lighter backgorund, return dark color
  } @else {
    @return $setlight; // Darker background, return light color
  }
}

/// Compute the maximum depth of a map
/// @group functions
@function __depth($map) {
  $level: 1;
  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(__depth($value) + 1, $level);
    }
  }
  @return $level;
}
